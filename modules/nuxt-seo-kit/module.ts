import { addTemplate, createResolver, defineNuxtModule, logger } from '@nuxt/kit'
import chalk from 'chalk'
import { withBase } from 'ufo'
import { version } from '../../package.json'

interface SeoKitOptions {
  siteUrl: string
  siteName: string
  siteDescription: string
  indexable: boolean
  titleSeparator: string
  trailingSlash: boolean
  language: string
}

export interface ModuleOptions extends SeoKitOptions {
  splash: boolean
}

export interface ModulePublicRuntimeConfig extends SeoKitOptions {
}

const publicRuntimeConfigKeys = ['siteName', 'siteDescription', 'siteUrl', 'titleSeparator', 'trailingSlash', 'language'] as const

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: 'nuxt-seo-kit',
    compatibility: {
      nuxt: '^3.0.0',
      bridge: false,
    },
    configKey: 'site',
  },
  // @ts-expect-error type issue
  defaults(nuxt) {
    const defaults: Record<any, any> = {}
    for (const k of publicRuntimeConfigKeys)
      defaults[k] = nuxt.options.runtimeConfig.public[k]
    let indexable = true
    if (typeof process.env.NUXT_INDEXABLE !== 'undefined')
      indexable = String(process.env.NUXT_INDEXABLE) !== 'false'
    else if (typeof nuxt.options.runtimeConfig.indexable !== 'undefined')
      indexable = String(nuxt.options.runtimeConfig.indexable) !== 'false'
    else if (process.env.NODE_ENV !== 'production')
      indexable = false
    return {
      splash: nuxt.options.dev,
      ...defaults,
      indexable,
    }
  },
  async setup(config, nuxt) {
    const { resolve } = createResolver(import.meta.url)

    // configure nuxt-unhead
    nuxt.options.unhead = nuxt.options.unhead || {
      seoOptimise: true,
      resolveAliases: true,
      ogTitleTemplate: `%s ${config.titleSeparator} ${config.siteName}`,
      ogDescriptionTemplate: '%s',
    }
    nuxt.options.unhead.ogTitleTemplate
      = nuxt.options.unhead.ogTitleTemplate
      || `%s ${config.titleSeparator} ${config.siteName}`

    // configure nuxt-simple-sitemap
    nuxt.options.sitemap = nuxt.options.sitemap || {
      hostname: config.siteUrl,
      trailingSlash: config.trailingSlash,
      enabled: true,
      defaults: {},
      urls: [],
      include: ['/**'],
      devPreview: true,
    }
    nuxt.options.sitemap.hostname = config.siteUrl
    nuxt.options.sitemap.trailingSlash = config.trailingSlash

    // configure nuxt-schema-org
    nuxt.options.schemaOrg = nuxt.options.schemaOrg || {
      host: config.siteUrl,
      inLanguage: config.language,
    }
    nuxt.options.schemaOrg.host = config.siteUrl
    nuxt.options.schemaOrg.inLanguage = config.language

    // configure nuxt-og-image
    nuxt.options.ogImage = nuxt.options.ogImage || {
      host: config.siteUrl,
      defaults: { component: 'OgImageBasic', width: 1200, height: 630 },
      experimentalNitroBrowser: false,
      fonts: ['Inter:400', 'Inter:700'],
      satoriOptions: {},
      forcePrerender: false,
    }
    nuxt.options.ogImage.host = config.siteUrl

    // configure nuxt-link-checker
    nuxt.options.linkChecker = nuxt.options.linkChecker || {
      trailingSlash: config.trailingSlash,
      host: config.siteUrl,
      failOn404: true,
      exclude: [],
    }
    nuxt.options.linkChecker.host = config.siteUrl
    nuxt.options.linkChecker.trailingSlash = config.trailingSlash

    // configure nuxt-simple-robots
    nuxt.options.robots = nuxt.options.robots || {
      indexable:
        Boolean(process.env.NUXT_INDEXABLE)
        || config.indexable
        || process.env.NODE_ENV === 'production',
      sitemap: [withBase('/sitemap.xml', config.siteUrl)],
      disallow: [],
      robotsEnabledValue:
        'index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1',
      robotsDisabledValue: 'noindex, nofollow',
    }
    nuxt.options.robots.indexable = config.indexable
    nuxt.options.robots.sitemap = [withBase('/sitemap.xml', config.siteUrl)]

    addTemplate({
      filename: 'nuxt-seo-kit.d.ts',
      getContents: () => {
        return `// Generated by nuxt-seo-kit
declare module '#nuxt-seo-kit/config' {
  const config : {
    siteUrl: string
    siteName: string
    siteDescription: string
    indexable: boolean
    titleSeparator: string
    trailingSlash: boolean
    language: string
  }
  export default config
}
`
      },
    })

    nuxt.hooks.hook('prepare:types', ({ references }) => {
      references.push({ path: resolve(nuxt.options.buildDir, 'nuxt-seo-kit.d.ts') })
    })

    nuxt.options.build.transpile.push(...[
      'nuxt-seo-kit',
      resolve('../../server'),
      resolve('../../components'),
      resolve('../../composables'),
    ])

    if (config.splash) {
      logger.log('')
      let latestTag = `v${version}`
      try {
        latestTag = (await $fetch<any>('https://ungh.unjs.io/repos/harlan-zw/nuxt-seo-kit/releases/latest')).release.tag
      }
      catch (e) {}
      logger.log(`${chalk.green('SEO Kit')} ${chalk.yellow(`v${version}`)} â€¢ All-in-one SEO ${chalk.gray(`by ${chalk.underline('@harlan_zw')}`)}`)
      if (latestTag !== `v${version}`)
        logger.log(`${chalk.gray('  â”œâ”€ ')}ðŸŽ‰ New version available!${chalk.gray(` Run ${chalk.underline(`npm i nuxt-seo-kit@${latestTag}`)} to update.`)}`)

      logger.log(chalk.dim('  â””â”€ ðŸ’–  Like this package? Consider sponsoring me on GitHub https://github.com/sponsors/harlan-zw'))
      logger.log('')
    }

    const exports = `const config = ${JSON.stringify(config, null, 2)};\nexport default config`

    // add alias for nuxt app
    const dst = addTemplate({
      filename: 'nuxt-seo-kit-config.mjs',
      getContents: () => exports,
    })
    nuxt.options.alias['#nuxt-seo-kit/config'] = dst.dst

    nuxt.hooks.hook('nitro:config', (nitroConfig) => {
      nitroConfig.virtual!['nuxt-seo-kit/config'] = exports
    })
  },
})
